#!/usr/bin/env python

import os
import configparser
import logging
import urllib.request as request
from sys import platform
from datetime import datetime
import csv


class StockScraper:

	config = ''
	config_dict = {}
	
	logging.basicConfig(
		filename='YahooFinancialLog.log', level=logging.DEBUG,
		format='%(asctime)s - StockScraper - %(message)s')
	
	def load_properties_from_section(self, values):
	
		self.config = configparser.ConfigParser()
		self.config.read('nasdaqconfig.ini')
		
		try:
			for sections in self.config.options(values):
				self.config_dict[sections] = self.config.get(values, sections)
				
			logging.debug('Loaded properties into dictionary')
				
		except FileNotFoundError:
			
			logging.error('Config file does not exist')
			
		except KeyError:
			
			logging.error('Illegal key')
			
		except ValueError:
			
			logging.error('Value error')
	
	def connect_to_nasdaq(self):
	
		today = datetime.today()
		now = datetime.now()
		now_time = now.time()
		url = self.config_dict['nasdaq_csv']
		nasdaq_req = request.urlopen(url)
		directory = self.create_save_directory()
		open_location = directory + 'companylist' + str(datetime.today().strftime('%Y-%m-%d')) + '.csv'
		
		if now_time.hour >= 16 and not os.path.isfile(open_location) and not self.check_if_market_closed(today):
			logging.debug("After 4 PM (Nasdaq close) and file doesn't exist, markets open today, creating file")
			
			csv_data = nasdaq_req.read()
			
			with open(open_location, 'w+') as f:
				f.write(csv_data.decode('utf-8'))
				f.close()
			
	def check_if_market_closed(self, today):
	
		market_closed = False
		if today.weekday() == 6 or today.weekday() == 7:
			market_closed = True
			logging.debug("Market closed today")
		return market_closed
	
	#def input_stock_names_into_list(self):

	def create_save_directory(self):
	
		current_dir = os.getcwd()
		new_dir = self.config_dict['nasdaq_dir']
		
		if platform == 'linux' or platform == 'linux2' or platform == 'darwin':
			
			add_slash = '/'
			
		else:
			
			add_slash = '\\'
			
		directory = os.path.join(current_dir, new_dir) + add_slash
		if not os.path.exists(directory):
			os.mkdir(directory)
		
		return directory
	
	
StockScraper.load_properties_from_section(StockScraper(), 'Sources')
StockScraper.connect_to_nasdaq(StockScraper())
